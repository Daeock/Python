# 파이썬 기초
## 다루는 내용
### 쥬피터 사용법
### 파이썬 기본 변수
- 정수(int), 부동소수(float), 볼리언(True/False), 문자열(strings)
- 리스트(list), 튜플(tuple), 사전(dictionary), for문, if문

# 파이썬 기초 문법
- 변수명과 변수 type을 미리 정의할 필요없이 임의로 즉시 만들어 사용할 수 있다.
- 예약어(if, for, True 등)는 변수로 사용할 수 없다.

#### 기본변수
- 파이썬의 기본 변수는 정수, 소수, 불리언, 문자열 등이 있다.
- 파이썬에서는 변수명과 변수 타입을 미리 정의할 필요 없이 임의로 즉시 만들어 사용할 수 있다.
- 단, 기본적으로 사용하는 예약어(if, for, True 등)는 변수로 사용할 수 없다.
- 아래는 변수 a,x,y,z에 여러 가지 기본변수 값을 배정하는 것을 보였다. 값 배정(assing)시에는 "=" 기호를 사용한다.

print("""이것은 여러줄로
구성된 문자열을
표시하기 위한 방법입니다""")

a=True
b=False

# 리스트
- 여러 항목의 집합체로 각 항목의 타입은 서로 달라도 된다.(정수, 부동소수, 논리값, 문자열 등)
- 리스트를 만드려면 대괄호 []를 사용하고 각 항목을 ','로 구분한다.

a= 0.5
x= 3
y= True
z='홍길동'

list_1=[x,y,z]
print(list_1)

type(list_1)

items=[1,2,3,4,5,'kim']
items*2

itme_2=list([1,2,3])

itme_2

print(len(list_1)) #len() : 리스트 안에 존재하는 항목의 개수

print(3 in list_1) 
# list_1의 항목 중 '3'이 있으면 True, 없으면 False
# in : 리스트 내에 어떤 항목이 이쓴지 확인

print(4 in list_1)

list_1.append(100) #append : 리스트에 항목 추가

list_1

items[0] 
#itmes에 속해있는 항목 중 0번을 출력
#항목은 0번부터 시작함. [1,2,3,4,5]의 경우 앞에서부터 0번, 1번, 2번, 3번, 4번

items[2]=100

items

items[4]='string'
items

items[:2] #items의 항목 중 앞에서부터 2개만 나타냄

items[:-1] #items의 항목 중 뒤에서부터 1개를 제외하고 나타냄

items[-1] #items의 항목 중 뒤에서부터 1개만 나타냄

items[2:] #items의 항목 중 두번째부터 끝까지 나타냄

items

items[2:4]

items[2:5]

items[5]

- range() : 일정한 범위의 숫자로 구성된 리스트를 한 번에 만드는 함수
- range(start, stop[,step]
- default:start=0,step=1

x2 = range(0,10)
type(x2)

x3 = range(10, 20, 2)

x3

for i in x3:
    print(i)

for i in x2:
    print(i)

x4 = range(10, 20 , 3)
for i in x4:
    print(i)

print(x3[0]) # 마찬가지로 앞에서부터 0번으로 시작

- List Comprehension : 리스트, 내부 for문

list_5=[x*10 for x in range(5)]
print(list_5)

# 튜플(tuple)
- 튜플으 리스트처럼 어쩌구저쩌구
- 튜플은 소괄호 리스트는 대괄호

my_tuple=(1,2,3)
your_tuple=4,5,'hello'
print(my_tuple + your_tuple)

type(your_tuple)

list_10=[1,2,3]
list_12=[4,5,'hello']
print(list_10 + list_12)

a,b,c=1,10,100

print(a)
print(b)

my_tuple[-1]=100
#튜플은 리스트와 달리 항목을 변경시킬 수 없다.

our_tuple=10,5,2
print(our_tuple)

our_tuple[1]=23

my_tuple=(1,2,3)
your_tuple=4,5,'hello'
print(my_tuple + your_tuple)

tuple_1=[4,5,'hello']

type(tuple_1)

print(my_tuple + your_tuple)

type(my_tuple)

print(my_tuple + tuple_1)

tuple_1

type(tuple_1)

my_tuple

type(my_tuple)

print(tuple_1 + my_tuple)

list_100=[1,2,3]

type(list_100)

list_100=(1,2,3)

type(list_100)

type(list_1), type(list_100)

list_1111=(2,2,2)
tuple_1213=[2,3,4]

type(tuple_1213)

### 사전(Dictionaries)
- 딕셔너리로 키:값 조합 형태의 리스트를 만들 수 있다.
- 딕셔너리에서는 항목을 찾을 때 키를 인자로 사용한다.
- 딕셔너리에서 저장되 순서는 중요시하지 안흔다.
- 딕셔너리는 중괄호 {}로 만든다.

name_age = {'kim':20,'lee':25}
print(name_age['kim'])

- key() : key 리스트
- value() : 값 리스트
- item() : 딕셔너리 각 항목을 튜플로 만들고 전체 항목을 리스트로 반환(검색 속도를 빠르게 하는 목적)

print(name_age.keys())

print(name_age.values())

print(name_age.items())

print('kim' in name_age)
print('park' in name_age)

name_age['song'] = 35
print(name_age)
#딕셔너리에서 항목을 추가하면 가장 끝에 key와 value가 추가됨

x=range(1,20,2)
for i in x:
    print(i*10)

# for 루프
- 동작을 바복할 때 for 루프를 사용
- for 문장의 끝에는 ':"가 있어야 하며 for문이 적용되는 블록은 반드시 들여쓰기가 있어야함

itemss = [1,5,100]

for x in itemss:
    print(x**3)

for i in range(10):
    print (i*1000)

for x in (1,3,5,10):#사각형의 넓이를 구하는 프로그램. x를 튜플로 정의
    print(x, "'s square ='", x*x)

# if 문

x=5
if x >10:  #x가 10보다 클 때 수행
    print('x>10')
    print('-------------')
elif x >3:
    print('10>=x>3')  #x가 10보다 작고 3보다 클 때 수행
else:
    print('x<=3') #위의 조건을 모두 만족하지 않을 때 수행

# sort()
- sort() : 리스트 항목들의 내용들을 값의 크기 순으로 정렬, 리스트의 내용이 변경
- default : 오름차순

x=[2,1,3,5,4]
x. sort()
print(x)

- 리스트의 내용이 변경되지 않게 하려면 sorted() 사용

x =[2,1,3,5,4]
y = sorted(x)
print(x)
print(y)

- 내림차순으로 정렬하려면 reverse=True 사용

x= [2,1,3,5,4]
x. sort(reverse=True)
print(x)

x= [2,1,3,5,4]
x. sort(reverse=False) #False는 넣으나마나
print(x)

- sort_values() : DataFrame을 정렬하는 메소드
- 특정 열을 기준으로 정렬할 수 있다.
- by : 기준 열, asecnding : 오름차순/내림차순

import pandas as pd # pandas는 패키지명. 아나콘다는 패키지가 설치되어 있음. pandas를 pd라고 별명지음.
a = pd.DataFrame({'순서':[1,2,3],     # DataFrame은 표를 만드는 명령어
                   '이름':['park','lee','choi'],
                    '나이':[30,20,40]}) 
# 딕셔너리로 정의되어 있음. key:순서,이름,나이 / value:[1,2,3],['park','lee','choi'],[30,20,40]
df.sort_values(by=['순서'], ascending=True)

# 들여쓰기

x = [[1,2,3],
    [4,5,6],
    [7,8,9]]
print(x) #컴퓨터가 볼 때는 그냥 한줄

x= 3+4+5+6
+7
print(x)

y= 3+4+5+6\
+7
print(y)

# Module 설치
- Python 기본 기능 이외에 추가 기능을 사용하려며 해당 Module을 설치해야함
    * 해당 module을 server에 설치하느 것으 한번만 하면 된다.
    * pip install
- 설치된 module을 Python에서 사용하려면 program에서 import해야한다.
    * import matplotlib.pyplot as plt

pip install tensorflow

import tensorflow as tf

# 함수정의
- def : 임의의 함수를 정의
- 함수 인자의 값을 default 값으로 지정할 수 있다.
- 함수 호출 시에 인자 값을 주지 않으면 default 값으로 수행

def double(x):
    return x*2
double(5)

def double(x=100):
    return x*2
double() # x에 값을 주지 앟으면 default인 100으로 입력됨.

double(2) # 값을 입력하면 x=2로 계산







